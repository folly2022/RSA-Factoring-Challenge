#!/usr/bin/env python3
'''Module - Factors natural numbers'''

from  __future__  import  division
import sys
import os


def func_factors(filename):
    '''Read and find Factorials of every line '''
    with open(filename, 'r') as f:
        for line in f:
            num = int(line)
            resul = factors(num)
            print ("{}={}*{}".format(num, int(num / resul), resul))
    f.closed

def factors(x):
    '''Returns the minimun factorial number '''
    for y in range(1, x + 1):
        if x % y == 0 and y is not 1:
            return y

if __name__ == "__main__":
    '''main'''
    if (len(sys.argv) is not 2):
        raise SyntaxError("[BAD-USAGE]: Expected only one argument")
    func_factors(sys.argv[1])
"""
#!/usr/bin/python3
from sys import argv
from math import sqrt
import math

def factor(number, test_num):
    """ Finds the values to return once a number has been found
    """


    print("{}={}*{}".format(number, (number // test_num), test_num))


with open(argv[1], mode="r", encoding="UTF-8") as f:
    for line in f:
        number = int(line)
        if number % 2 == 0:
            factor(number, 2)
        else:
            max_number_to_test = math.floor(math.sqrt(number))
            for test_num in range(3, max_number_to_test + 1, 2):
                if number % test_num == 0:
                    factor(number, test_num)
                    break
                    
                    
                    """
"""
def factor():
    with open(argv[1]) as f:
        for line in f:
            num = int(line)
            print("{:d}=".format(num), end="")
            if num % 2 == 0:
                print("{}*2".format(num//2))
                continue
            sqn = int(sqrt(num))
            if sqn % 2 == 0:
                sqn += 1
            for i in range(3, sqn + 1, 2):
                if num % i == 0:
                    print("{}*{}".format(i, num//i))
                    break
            if num % i != 0:
                print("{}={}*1".format(num, num))


factor()
"""
